generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  account       Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId // Reference to the User ID (ObjectId stored as a string)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expiresAt         Int? // BigInt in SQL can be represented as Int in MongoDB
  idToken           String? @db.String
  scope             String?
  sessionState      String?
  tokenType         String?

  user User @relation(fields: [userId], references: [id]) // Relates to User model

  @@unique([provider, providerAccountId]) // Index for querying accounts by provider
}

// VerificationToken collection
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String // Indexed for fast lookups
  expires    DateTime
  token      String

  @@unique([identifier, token])
}

model Institute {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  courses   Course[]
  documents Document[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Course {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  instituteId String       @db.ObjectId
  institute   Institute    @relation(fields: [instituteId], references: [id])
  disciplines Discipline[]
  documents   Document[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([name, instituteId])
}

model Discipline {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  courseId  String     @db.ObjectId
  course    Course     @relation(fields: [courseId], references: [id])
  semesters Semester[]
  documents Document[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([name, courseId])
}

model Semester {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  disciplineId String?     @db.ObjectId
  discipline   Discipline? @relation(fields: [disciplineId], references: [id])
  documents    Document[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([name, disciplineId])
}

model Document {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  professor    String
  disciplineId String     @db.ObjectId
  discipline   Discipline @relation(fields: [disciplineId], references: [id])
  semesterId   String     @db.ObjectId
  semester     Semester   @relation(fields: [semesterId], references: [id])
  courseId     String     @db.ObjectId
  course       Course     @relation(fields: [courseId], references: [id])
  instituteId  String     @db.ObjectId
  institute    Institute  @relation(fields: [instituteId], references: [id])
  fileName     String
  fileUrl      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
